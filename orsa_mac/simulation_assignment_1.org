#+title: Simulation Assignment 1
#+author: Luke Miller

#+PROPERTY: header-args:R  :session *R*
#+PROPERTY: header-args:R  :dir ~/projects/orsa-mac/orsa_mac/
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage[margin = 1in]{geometry}
#+LATEX_COMPILER: lualatex

* Introduction
:PROPERTIES:
:ID:       9c0f901f-dfce-4114-b1a9-904ec024d524
:END:
This is an individual assignment. You may discuss this with your classmates, but
you are not allowed to look at or copy someone else's work. There are three
separate assignments, each requiring a separate simulation. You are to build the
simulation, run the simulation /at least/ 100 times and *provide one paragraph
as a response* (graphs and charts are always appreciated.) You are to turn your
final submission to me in the Assignment 1 folder located in Simulation
Assignments Submissions folder.

* Fire Fighter Response Time
:PROPERTIES:
:ID:       47985821-590e-4b05-9b19-6cc8266ef5ce
:END:
** Prompt
:PROPERTIES:
:ID:       f5147060-bc4b-48b6-9729-b5da8fefd587
:END:
Build a simulation of the firefighter problem we did in class. You can use
either an Excel Spreadsheet or R. Conduct 100 repetitions of the simulation and
answer the following questions:

1. What is the average response time?
2. What was your greatest response time?
3. What is the minimum response time?

** Simulation
:PROPERTIES:
:ID:       be0f664d-4c8a-45b5-b51f-58d238c99688
:END:
For this simulation, I am going to construct an empirical CDF by sorting the
observations then converting each step of observations into a line segment.
This will allow me to build a piecewise CDF across \([0-1]\) which I can then
solve for x in terms of R.

I will build this simulation in R.

#+name: ff_sim
#+begin_src R :var runs=100000 :session
ff_response_data <- c(2.76, 1.83, 0.80, 1.45, 1.24)

fire_fighter_response_simulator <- function(observed_times, runs) {

                                        # Validate Input
  if (!is.vector(observed_times) | !is.numeric(observed_times[1])) {
    stop("Please input a vector of observations of Firefighter Response Time.")
  }
  if (!is.numeric(runs) | it < 1) {
    stop("Iterations must be >= 1.")
  }

  x <- sort(observed_times)
  n <- length(x)
  diffs <- c(x[1], x[-1]-x[-n])
  m <- (1/n)/diffs
  y <- seq(1/n,1,1/n)
  b <- y-m*x


  rolls <- runif(runs)
  times <- NULL
  for (i in 1:runs) {
    times[i] <- (rolls[i]-b[ceiling(n*rolls[i])])/m[ceiling(n*rolls[i])]
  }

  return(list(times = times,
              mean = mean(times),
              max = max(times),
              min = min(times)))
}

set.seed(123)
ff_sim <- fire_fighter_response_simulator(ff_response_data, runs)
c(ff_sim$mean,ff_sim$max,ff_sim$min)
#+end_src

#+RESULTS: ff_sim
|     1.33881061031184 |
|     2.75996420826064 |
| 7.28219747543335e-05 |

** Results
:PROPERTIES:
:ID:       bcb6f4ec-a964-4b7f-9823-85d7dab20add
:END:
Using the empirical CDF by transforming observed times into points into slopes
and feeding back into a piecewise function \(f(x) = \frac{R-b}{m}\) seems to
give a distribution that matches the underlying distribution of the sample data.
The more and better observations fed into it, the better the approximation gets
to the underlying data. For the five observations we were presented in class,
100,000 iterations of the simulation produced a max time of 2.75 minutes (0.01
minutes off from the max observed time of 2.76), a min time of
\(7.28\times10^{-5}\), and a mean of 1.34. As shown in the histogram below, the
data approximates a symmetric distribution.

#+name: plot_ff_sim
#+header: :file ./firestation_sim.png
#+begin_src R :session :results output graphics file
library(ggplot2)

as.data.frame(ff_sim) |>
  ggplot(aes(x = times)) +
  geom_histogram(binwidth = 0.2) +
  geom_freqpoly()
#+end_src

#+RESULTS: plot_ff_sim
[[file:./firestation_sim.png]]

* ID Card Office
:PROPERTIES:
:ID:       b9e69e84-ea92-47cb-960e-d5c1a769108f
:END:
** Prompt
:PROPERTIES:
:ID:       b053e0af-2e00-421a-889f-af0ae7530445
:END:
The Fort Gregg-Adams ID Card Office has had to reduce staff to one employee and
want to know how this impacts operations. Customers arrive at the office at a
rate of 4 jobs per hour (Poisson) and the clerk can serve 5 customers per hour
(Poisson).

Build a discrete event simulation to model 8 hours' worth of the operation. You
can use an Excel spreadsheet, or R.

Provide the longest time a customer was in the system and the server utilization
rate.

** Simulation
:PROPERTIES:
:ID:       3854459f-52d9-44b8-b011-0d86acaf9426
:END:
I can model the arrival times to the ID card office with an exponential distribution solved for \(x\) in terms of \(R\): \(x=\frac{-ln(R)}{\lambda}\).

This is very similar to what we did in class with the coffee shop.

#+name: id_sim
#+begin_src R :session
set.seed(123)
n <- 100
mins <- 480

arrival_rolls <- runif(n)
lambda_arrivals <- 1/15
time_between_arrivals <- -log(arrival_rolls)/lambda_arrivals
arrival_clock <- cumsum(time_between_arrivals)

service_rolls <- runif(n)
lambda_service <- 1/12
service_times <- -log(service_rolls)/lambda_service

depart_clock <- NULL
begin_service_clock <- NULL
time_in_queue <- NULL
clerk_idle_time <- NULL
for (i in 1:n) {
  begin_service_clock[i] <- max(arrival_clock[i],depart_clock[i-1])
  time_in_queue[i] <- begin_service_clock[i]-arrival_clock[i]
  clerk_idle_time[i] <- begin_service_clock[i] - if(is.null(depart_clock)){0} else {depart_clock[i-1]}
  depart_clock[i] <- begin_service_clock[i] + service_times[i]
  if(depart_clock[i] > mins) {break}
}
clerk_utilization_rate <- sum(clerk_idle_time)/mins
list(clerk_utilization_rate = clerk_utilization_rate,
     max_time_in_queue = max(time_in_queue))
#+end_src

#+RESULTS: id_sim
| 0.294863193370666 | 72.8277499864645 |

** Results
:PROPERTIES:
:ID:       9d071dcc-c17a-47ca-8a56-6c15e09601a7
:END:
I set the seed to 123 for reproducibility, and ran the sim until the first customer departure time was above eight hours, representing the last customer of the day. Through that time, the clerk was idle 29.49% of the time, and the maximum time a customer was in the queue was 72.83 minutes. The histogram below shows customer time spent in the queue.

#+name: plot_id_sim
#+header: :file ./id_sim.png
#+begin_src R :session :results output graphics file
library(ggplot2)

custs <- length(depart_clock)

id_sim_df <- data.frame(interarrival_times = time_between_arrivals[1:custs],
                        arrival_clock = arrival_clock[1:custs],
                        service_times = service_times[1:custs],
                        time_in_queue = time_in_queue)

id_sim_df |>
  ggplot(aes(x = time_in_queue)) +
  geom_histogram(bins = 8)
#+end_src

#+RESULTS: plot_id_sim
[[file:./id_sim.png]]

* Jamming Missiles
:PROPERTIES:
:ID:       a894715c-30d7-4a08-9488-17837daff681
:END:
** Prompt
:PROPERTIES:
:ID:       9c721267-8e51-4a73-ba05-b7d47cb3b223
:END:
The enemy has a new GPS jamming device used to misdirect US Missiles after
launch. However, our missiles have built in countermeasures. The missile also
has a back-up guidance system that is less accurate, but unaffected by the
jamming.

- Missile flight time to target is exponentially distributed with a mean of 90
  seconds.
- For every 60 seconds of flight time, the enemy gets a chance to jam the
  missile and the missile's countermeasure gets an attempt to counter the
  jamming: 1 attempt for 0-60 seconds, 2 attempts for 61-120 seconds, etc.
- Success of our countermeasures are as follows: 12% great success, 64% some
  success, and 24% no success.
- From the missile's countermeasure perspective:
  - Great success means the original guidance system is still intact and the
    missile has a 95% chance of success.
  - Some success means the missile lost it's GPS guided ability and is forced to
    use inertial guidance which results in a 25% chance of failure for the
    missile.
  - No success results in the missile being totally jammed and the missile
    self-destructs with 0% chance to hit the target.
- Once a missile switches to inertial guidance, the enemy jammer no longer
  influences the missile. For example, a missile's flight time is 70 seconds, so
  the enemy gets 2 attempts to jam the missile, but the first attempt is met
  with "Some Success" from the missile's countermeasure, so now the missile has
  a 25% chance of failure to hit and the enemy doesn't get the second
  opportunity to defeat the missile.

  Current intelligence estimated it will require 19 successful missile strikes
  to destroy the enemy's munitions factory. You are to build a simulation model
  in Excel or R that represents the above scenario and answer the following
  questions:

  1. On average, how many missiles will we need to launch for success against
     the enemy's munitions plant?
  2. What is the greatest number of missiles we might use and what is the least
     we might use?
  3. What is the probability we can get the job done with exactly 19 missiles?


#+begin_export ascii

   +-------------------+          /------------------\
   | For (i in 1:Runs) +-------->/ Initial Conditions \-----+
   +-------------------+         \ (i.e. missile = 1) /     |
             ^                    \------------------/      |
             |                                              |
             |             +--------------------------------+
             |             |  +-------------------+     /-----------------\
             |     +-------+->| While (hits < 19) |--> / Determine Flight  \
             |     |          +-------------------+    \    time and       /-+
             |     |                                    \  #attempts      /  |
             |     |                                     -----------------   |
             |     |                    +------------------------------------+
             |     |                    v
             |     |         +-----------------------+   /---------------\
             |     |  +----->| For (j in 1:attempts) |->/ Sample success  \
             |     |  |      +-----------------------+  \  of missile cm  /-+
             |     |  |                                  \---------------/  |
             |     |  |attempts remain                                      |
             |     |  |      +-----------------------+-------------------+--+
             |     |  |      |                       |break              |break
             |     |  |      v                       v                   v
             |     |  |  +---------+            +---------+         +---------+
             |     |  +--+ Great   |            |  Some   |         |   No    |
             |     |     | Success |            | Success |         | Success |
             |     |     +---+-----+            +----+----+         +----+----+
             |     |         |final attempt          |75%                |0%
             |     |         +-----------------------+-------------------+
             |     |           95%                   |
             |     |    if hit, hits += 1            v
             |     |    missile += 1           +------------+
             |     +---------------------------+ Hit / Miss |
             |                                 +-----+------+
             |  Record missiles used and run again   |
             +---------------------------------------+

#+end_export
** Simulation
:PROPERTIES:
:ID:       089933e0-a322-4dce-ae99-7cb9cf15a62e
:END:

#+name: missile_sim
#+begin_src R :session :var runs=100000
set.seed(123)
                                        # Initialize Out of Run Variables
missiles_by_run <- NULL
flight_time_beta <- 90
flight_time_lambda <- 1/flight_time_beta
time_per_attempt <- 60
hits_required <- 19
great_success <- 0.12
some_success <- 0.64 + great_success
great_success_hit_chance <- 0.95
some_success_hit_chance <- 0.75

                                        # Loop number of runs
for(i in 1:runs) {
                                        # Initialize Run Variables
  missiles_shot <- 0
  hits <- 0
                                        # Loop until required number of hits
  while(hits < hits_required) {
    flight_time <- -log(runif(1))/flight_time_lambda
    attempts <- ceiling(flight_time/time_per_attempt)
    hit_chance <- 0
    for (j in 1:attempts) {
      cm_roll <- runif(1)
      if (cm_roll < great_success) {
        hit_chance <- great_success_hit_chance
      } else if (cm_roll < some_success) {
        hit_chance <- some_success_hit_chance
        break
      } else {
        break
      }
    }
    to_hit_roll <- runif(1)
    if (to_hit_roll < hit_chance) {hits <- hits + 1}
    missiles_shot <- missiles_shot + 1
  }
  missiles_by_run[i] <- missiles_shot
}
data.frame(mean = mean(missiles_by_run),
           min = min(missiles_by_run),
           max = max(missiles_by_run),
           chance_of_19 = sum(missiles_by_run == 19)/runs)
#+end_src

#+RESULTS: missile_sim
| 32.45069 | 19 | 59 | 5e-05 |

** Results
:PROPERTIES:
:ID:       26a83cd5-ed92-4d4d-adc5-464d54568200
:END:
Our missile countermeasures are moderately effective, but currently we should
expect to have to shoot 33 missiles on average to destroy the enemy munitions
plant. In our most successful attempt, we were able to destroy it with only the
absolute minimum of 19 missiles, while our least took 59. The odds of taking
only 19 missiles are 1 in 20,000. A histogram of all attempts is below.

#+name: plot_missile_sim
#+header: :file ./missile_sim.png
#+begin_src R :session :results output graphics file
library(ggplot2)
data.frame(missiles = missiles_by_run) |>
  ggplot(aes(x = missiles)) +
  geom_histogram(bins = 40) +
  geom_freqpoly(bins = 40)
#+end_src

#+RESULTS: plot_missile_sim
[[file:./missile_sim.png]]
